// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "Fuzon_Mp3.h"
#include "Global.h"

Fl_Double_Window *MainWindow=(Fl_Double_Window *)0;

Fl_Light_Button *Button_Eq=(Fl_Light_Button *)0;

Fl_Light_Button *Button_Playlist=(Fl_Light_Button *)0;

Fl_Light_Button *Button_Calc=(Fl_Light_Button *)0;

Fl_Light_Button *Button_Options=(Fl_Light_Button *)0;

Fl_Light_Button *Play=(Fl_Light_Button *)0;

Fl_Light_Button *Shuffle=(Fl_Light_Button *)0;

Fl_Light_Button *Button_OE2_Vis=(Fl_Light_Button *)0;

Fl_Button *Play_Next=(Fl_Button *)0;

Fl_Button *Play_Previous=(Fl_Button *)0;

Fl_Slider *Seekbar=(Fl_Slider *)0;

Fl_Output *CurrentlyPlaying=(Fl_Output *)0;

Fl_Dial *Volume=(Fl_Dial *)0;

Fl_Box *Box_Spectrum=(Fl_Box *)0;

Fl_Slider *Slider_FFT_0=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_1=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_2=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_3=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_4=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_5=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_6=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_7=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_8=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_9=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_10=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_11=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_12=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_13=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_14=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_15=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_16=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_17=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_18=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_19=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_20=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_21=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_22=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_23=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_24=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_25=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_26=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_27=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_28=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_29=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_30=(Fl_Slider *)0;

Fl_Slider *Slider_FFT_31=(Fl_Slider *)0;

Fl_Slider *Slider_OutputLevel_L=(Fl_Slider *)0;

Fl_Slider *Slider_OutputLevel_R=(Fl_Slider *)0;

Fl_Value_Input *Calc_Bpm=(Fl_Value_Input *)0;

Fl_Output *Calc_0=(Fl_Output *)0;

Fl_Output *Calc_1=(Fl_Output *)0;

Fl_Output *Calc_2=(Fl_Output *)0;

Fl_Output *Calc_3=(Fl_Output *)0;

Fl_Output *Calc_4=(Fl_Output *)0;

Fl_Output *Calc_5=(Fl_Output *)0;

Fl_Output *Calc_6=(Fl_Output *)0;

Fl_Slider *Eq_0=(Fl_Slider *)0;

Fl_Slider *Eq_1=(Fl_Slider *)0;

Fl_Slider *Eq_2=(Fl_Slider *)0;

Fl_Slider *Eq_3=(Fl_Slider *)0;

Fl_Slider *Eq_4=(Fl_Slider *)0;

Fl_Slider *Eq_5=(Fl_Slider *)0;

Fl_Slider *Eq_6=(Fl_Slider *)0;

Fl_Slider *Eq_7=(Fl_Slider *)0;

Fl_Slider *Eq_8=(Fl_Slider *)0;

Fl_Light_Button *Eq_On=(Fl_Light_Button *)0;

Fl_Button *Eq_Reset=(Fl_Button *)0;

Fl_Light_Button *Vst_On=(Fl_Light_Button *)0;

Fl_Choice *Vst_Choice=(Fl_Choice *)0;

Fl_Button *Vst_Reset=(Fl_Button *)0;

Fl_Button *Vst_Show=(Fl_Button *)0;

Fl_Browser *Playlist_Browser=(Fl_Browser *)0;

Fl_Value_Output *Playlist_Entries_Total=(Fl_Value_Output *)0;

Fl_Button *Button_PlaylistManager=(Fl_Button *)0;

Fl_Input *Playlist_Search=(Fl_Input *)0;

Fl_Browser *Options_Browser_Menu=(Fl_Browser *)0;

Fl_Box *Options_Seperator=(Fl_Box *)0;

Fl_Value_Slider *Options_Slider_Updaterate=(Fl_Value_Slider *)0;

Fl_Value_Slider *Options_Slider_SpectrumFalloffSpeed=(Fl_Value_Slider *)0;

Fl_Value_Slider *Options_Slider_SpectrumColourR=(Fl_Value_Slider *)0;

Fl_Value_Slider *Options_Slider_SpectrumColourG=(Fl_Value_Slider *)0;

Fl_Value_Slider *Options_Slider_SpectrumColourB=(Fl_Value_Slider *)0;

Fl_Light_Button *Options_Button_SpectrumEnable=(Fl_Light_Button *)0;

Fl_Choice *Options_Choice_OutputDevice=(Fl_Choice *)0;

Fl_Choice *Options_Choice_OutputFreq=(Fl_Choice *)0;

Fl_Browser *Options_Debug=(Fl_Browser *)0;

Fl_Double_Window* Create_WindowPlayer() {
  { MainWindow = new Fl_Double_Window(340, 383, "Fuzon Mp3");
    MainWindow->color((Fl_Color)37);
    MainWindow->selection_color(FL_BACKGROUND2_COLOR);
    MainWindow->labelfont(1);
    MainWindow->labelsize(9);
    MainWindow->labelcolor(FL_BACKGROUND2_COLOR);
    MainWindow->align(Fl_Align(97));
    MainWindow->when(FL_WHEN_NEVER);
    { Fl_Box* o = new Fl_Box(5, 145, 350, 255, "label");
      o->box(FL_GTK_DOWN_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_NO_LABEL);
      o->align(Fl_Align(512));
      o->when(FL_WHEN_NEVER);
    } // Fl_Box* o
    { Button_Eq = new Fl_Light_Button(270, 125, 35, 20, "DSP");
      Button_Eq->tooltip("DSP:");
      Button_Eq->box(FL_GTK_THIN_DOWN_BOX);
      Button_Eq->color((Fl_Color)34);
      Button_Eq->selection_color(FL_RED);
      Button_Eq->labelfont(1);
      Button_Eq->labelsize(11);
      Button_Eq->labelcolor(FL_BACKGROUND2_COLOR);
      Button_Eq->callback((Fl_Callback*)CB_Button_Eq);
    } // Fl_Light_Button* Button_Eq
    { Button_Playlist = new Fl_Light_Button(210, 125, 55, 20, "Playlist");
      Button_Playlist->tooltip("Playlist:\nShow or hide the playlist");
      Button_Playlist->box(FL_GTK_THIN_DOWN_BOX);
      Button_Playlist->value(1);
      Button_Playlist->color((Fl_Color)34);
      Button_Playlist->selection_color(FL_RED);
      Button_Playlist->labelfont(1);
      Button_Playlist->labelsize(11);
      Button_Playlist->labelcolor(FL_BACKGROUND2_COLOR);
      Button_Playlist->callback((Fl_Callback*)CB_Button_Playlist);
    } // Fl_Light_Button* Button_Playlist
    { Button_Calc = new Fl_Light_Button(310, 125, 40, 20, "Calc");
      Button_Calc->tooltip("Calc:\nShow or Hide the delay time calculator.\nUseful for music composition.");
      Button_Calc->box(FL_GTK_THIN_DOWN_BOX);
      Button_Calc->color((Fl_Color)34);
      Button_Calc->selection_color(FL_RED);
      Button_Calc->labelfont(1);
      Button_Calc->labelsize(11);
      Button_Calc->labelcolor(FL_BACKGROUND2_COLOR);
      Button_Calc->callback((Fl_Callback*)CB_Button_Calc);
    } // Fl_Light_Button* Button_Calc
    { Button_Options = new Fl_Light_Button(270, 107, 80, 16, "Options");
      Button_Options->tooltip("Options:\nTweak those settings");
      Button_Options->box(FL_GTK_THIN_DOWN_BOX);
      Button_Options->color((Fl_Color)34);
      Button_Options->selection_color(FL_RED);
      Button_Options->labelfont(1);
      Button_Options->labelsize(11);
      Button_Options->labelcolor(FL_BACKGROUND2_COLOR);
      Button_Options->callback((Fl_Callback*)CB_Button_Options);
    } // Fl_Light_Button* Button_Options
    { Play = new Fl_Light_Button(10, 110, 40, 25, "@>");
      Play->tooltip("Play/Pause:\n-If a file is loaded, toggles play/pause");
      Play->type(0);
      Play->box(FL_GTK_THIN_UP_BOX);
      Play->color((Fl_Color)51);
      Play->selection_color((Fl_Color)87);
      Play->labelfont(1);
      Play->labelsize(16);
      Play->callback((Fl_Callback*)CB_Play);
      Play->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      Play->when(FL_WHEN_CHANGED);
    } // Fl_Light_Button* Play
    { Shuffle = new Fl_Light_Button(120, 120, 35, 15, "132");
      Shuffle->tooltip("Shuffle On/Off\n- Enable shuffle");
      Shuffle->box(FL_GTK_THIN_UP_BOX);
      Shuffle->color((Fl_Color)51);
      Shuffle->selection_color((Fl_Color)87);
      Shuffle->labelfont(3);
      Shuffle->labelsize(10);
      Shuffle->callback((Fl_Callback*)CB_Shuffle);
    } // Fl_Light_Button* Shuffle
    { Button_OE2_Vis = new Fl_Light_Button(160, 120, 35, 15, "Vis");
      Button_OE2_Vis->tooltip("Fuzon Vis On/Off\n- Start or Stop the External Visualiser");
      Button_OE2_Vis->box(FL_GTK_THIN_UP_BOX);
      Button_OE2_Vis->color((Fl_Color)51);
      Button_OE2_Vis->selection_color((Fl_Color)87);
      Button_OE2_Vis->labelfont(3);
      Button_OE2_Vis->labelsize(10);
      Button_OE2_Vis->callback((Fl_Callback*)CB_Button_OE2_Vis);
      Button_OE2_Vis->when(FL_WHEN_CHANGED);
    } // Fl_Light_Button* Button_OE2_Vis
    { Play_Next = new Fl_Button(85, 110, 25, 25, ">>");
      Play_Next->box(FL_GTK_THIN_UP_BOX);
      Play_Next->color((Fl_Color)51);
      Play_Next->selection_color(FL_BACKGROUND2_COLOR);
      Play_Next->labelfont(1);
      Play_Next->labelsize(10);
      Play_Next->callback((Fl_Callback*)CB_Play_Next);
      Play_Next->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* Play_Next
    { Play_Previous = new Fl_Button(60, 110, 25, 25, "<<");
      Play_Previous->box(FL_GTK_THIN_UP_BOX);
      Play_Previous->color((Fl_Color)51);
      Play_Previous->selection_color(FL_BACKGROUND2_COLOR);
      Play_Previous->labelfont(1);
      Play_Previous->labelsize(10);
      Play_Previous->callback((Fl_Callback*)CB_Play_Previous);
      Play_Previous->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Button* Play_Previous
    { Seekbar = new Fl_Slider(10, 85, 258, 15, "Position");
      Seekbar->type(3);
      Seekbar->box(FL_GTK_ROUND_DOWN_BOX);
      Seekbar->color((Fl_Color)51);
      Seekbar->selection_color((Fl_Color)87);
      Seekbar->labelfont(1);
      Seekbar->labelsize(10);
      Seekbar->callback((Fl_Callback*)CB_Seekbar);
      Seekbar->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Slider* Seekbar
    { CurrentlyPlaying = new Fl_Output(10, 7, 345, 21);
      CurrentlyPlaying->box(FL_GTK_DOWN_BOX);
      CurrentlyPlaying->color((Fl_Color)16);
      CurrentlyPlaying->labeltype(FL_NO_LABEL);
      CurrentlyPlaying->labelsize(13);
      CurrentlyPlaying->labelcolor(FL_BACKGROUND2_COLOR);
      CurrentlyPlaying->textfont(1);
      CurrentlyPlaying->textsize(10);
      CurrentlyPlaying->textcolor((Fl_Color)87);
      CurrentlyPlaying->align(Fl_Align(FL_ALIGN_CENTER));
      CurrentlyPlaying->when(FL_WHEN_NEVER);
    } // Fl_Output* CurrentlyPlaying
    { Volume = new Fl_Dial(290, 40, 50, 50, "Volume");
      Volume->box(FL_GTK_ROUND_UP_BOX);
      Volume->color((Fl_Color)51);
      Volume->selection_color((Fl_Color)87);
      Volume->labelfont(1);
      Volume->labelsize(10);
      Volume->labelcolor((Fl_Color)87);
      Volume->maximum(100);
      Volume->step(1);
      Volume->value(100);
      Volume->callback((Fl_Callback*)CB_Volume);
      Volume->align(Fl_Align(130));
    } // Fl_Dial* Volume
    { Fl_Group* o = new Fl_Group(10, 37, 258, 38, "FFT_SPECTRUm");
      o->labeltype(FL_NO_LABEL);
      { Box_Spectrum = new Fl_Box(10, 37, 258, 38);
        Box_Spectrum->box(FL_GTK_THIN_DOWN_BOX);
        Box_Spectrum->color((Fl_Color)34);
        Box_Spectrum->selection_color(FL_FOREGROUND_COLOR);
        Box_Spectrum->labeltype(FL_NO_LABEL);
        Box_Spectrum->when(FL_WHEN_NEVER);
      } // Fl_Box* Box_Spectrum
      { Slider_FFT_0 = new Fl_Slider(10, 38, 8, 35);
        Slider_FFT_0->type(2);
        Slider_FFT_0->box(FL_ROUNDED_BOX);
        Slider_FFT_0->color((Fl_Color)34);
        Slider_FFT_0->selection_color(FL_RED);
        Slider_FFT_0->labeltype(FL_NO_LABEL);
        Slider_FFT_0->minimum(0.01);
        Slider_FFT_0->maximum(0);
        Slider_FFT_0->align(Fl_Align(194));
        Slider_FFT_0->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_0
      { Slider_FFT_1 = new Fl_Slider(18, 38, 8, 35);
        Slider_FFT_1->type(2);
        Slider_FFT_1->box(FL_ROUNDED_BOX);
        Slider_FFT_1->color((Fl_Color)34);
        Slider_FFT_1->selection_color(FL_RED);
        Slider_FFT_1->labeltype(FL_NO_LABEL);
        Slider_FFT_1->minimum(0.01);
        Slider_FFT_1->maximum(0);
        Slider_FFT_1->align(Fl_Align(194));
        Slider_FFT_1->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_1
      { Slider_FFT_2 = new Fl_Slider(26, 38, 8, 35);
        Slider_FFT_2->type(2);
        Slider_FFT_2->box(FL_ROUNDED_BOX);
        Slider_FFT_2->color((Fl_Color)34);
        Slider_FFT_2->selection_color(FL_RED);
        Slider_FFT_2->labeltype(FL_NO_LABEL);
        Slider_FFT_2->minimum(0.01);
        Slider_FFT_2->maximum(0);
        Slider_FFT_2->align(Fl_Align(194));
        Slider_FFT_2->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_2
      { Slider_FFT_3 = new Fl_Slider(34, 38, 8, 35);
        Slider_FFT_3->type(2);
        Slider_FFT_3->box(FL_ROUNDED_BOX);
        Slider_FFT_3->color((Fl_Color)34);
        Slider_FFT_3->selection_color(FL_RED);
        Slider_FFT_3->labeltype(FL_NO_LABEL);
        Slider_FFT_3->minimum(0.01);
        Slider_FFT_3->maximum(0);
        Slider_FFT_3->align(Fl_Align(194));
        Slider_FFT_3->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_3
      { Slider_FFT_4 = new Fl_Slider(42, 38, 8, 35);
        Slider_FFT_4->type(2);
        Slider_FFT_4->box(FL_ROUNDED_BOX);
        Slider_FFT_4->color((Fl_Color)34);
        Slider_FFT_4->selection_color(FL_RED);
        Slider_FFT_4->labeltype(FL_NO_LABEL);
        Slider_FFT_4->minimum(0.01);
        Slider_FFT_4->maximum(0);
        Slider_FFT_4->align(Fl_Align(194));
        Slider_FFT_4->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_4
      { Slider_FFT_5 = new Fl_Slider(50, 38, 8, 35);
        Slider_FFT_5->type(2);
        Slider_FFT_5->box(FL_ROUNDED_BOX);
        Slider_FFT_5->color((Fl_Color)34);
        Slider_FFT_5->selection_color(FL_RED);
        Slider_FFT_5->labeltype(FL_NO_LABEL);
        Slider_FFT_5->minimum(0.01);
        Slider_FFT_5->maximum(0);
        Slider_FFT_5->align(Fl_Align(194));
        Slider_FFT_5->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_5
      { Slider_FFT_6 = new Fl_Slider(58, 38, 8, 35);
        Slider_FFT_6->type(2);
        Slider_FFT_6->box(FL_ROUNDED_BOX);
        Slider_FFT_6->color((Fl_Color)34);
        Slider_FFT_6->selection_color(FL_RED);
        Slider_FFT_6->labeltype(FL_NO_LABEL);
        Slider_FFT_6->minimum(0.01);
        Slider_FFT_6->maximum(0);
        Slider_FFT_6->align(Fl_Align(194));
        Slider_FFT_6->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_6
      { Slider_FFT_7 = new Fl_Slider(66, 38, 8, 35);
        Slider_FFT_7->type(2);
        Slider_FFT_7->box(FL_ROUNDED_BOX);
        Slider_FFT_7->color((Fl_Color)34);
        Slider_FFT_7->selection_color(FL_RED);
        Slider_FFT_7->labeltype(FL_NO_LABEL);
        Slider_FFT_7->minimum(0.01);
        Slider_FFT_7->maximum(0);
        Slider_FFT_7->align(Fl_Align(194));
        Slider_FFT_7->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_7
      { Slider_FFT_8 = new Fl_Slider(74, 38, 8, 35);
        Slider_FFT_8->type(2);
        Slider_FFT_8->box(FL_ROUNDED_BOX);
        Slider_FFT_8->color((Fl_Color)34);
        Slider_FFT_8->selection_color(FL_RED);
        Slider_FFT_8->labeltype(FL_NO_LABEL);
        Slider_FFT_8->minimum(0.01);
        Slider_FFT_8->maximum(0);
        Slider_FFT_8->align(Fl_Align(194));
        Slider_FFT_8->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_8
      { Slider_FFT_9 = new Fl_Slider(82, 38, 8, 35);
        Slider_FFT_9->type(2);
        Slider_FFT_9->box(FL_ROUNDED_BOX);
        Slider_FFT_9->color((Fl_Color)34);
        Slider_FFT_9->selection_color(FL_RED);
        Slider_FFT_9->labeltype(FL_NO_LABEL);
        Slider_FFT_9->minimum(0.01);
        Slider_FFT_9->maximum(0);
        Slider_FFT_9->align(Fl_Align(194));
        Slider_FFT_9->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_9
      { Slider_FFT_10 = new Fl_Slider(90, 38, 8, 35);
        Slider_FFT_10->type(2);
        Slider_FFT_10->box(FL_ROUNDED_BOX);
        Slider_FFT_10->color((Fl_Color)34);
        Slider_FFT_10->selection_color(FL_RED);
        Slider_FFT_10->labeltype(FL_NO_LABEL);
        Slider_FFT_10->minimum(0.01);
        Slider_FFT_10->maximum(0);
        Slider_FFT_10->align(Fl_Align(194));
        Slider_FFT_10->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_10
      { Slider_FFT_11 = new Fl_Slider(98, 38, 8, 35);
        Slider_FFT_11->type(2);
        Slider_FFT_11->box(FL_ROUNDED_BOX);
        Slider_FFT_11->color((Fl_Color)34);
        Slider_FFT_11->selection_color(FL_RED);
        Slider_FFT_11->labeltype(FL_NO_LABEL);
        Slider_FFT_11->minimum(0.01);
        Slider_FFT_11->maximum(0);
        Slider_FFT_11->align(Fl_Align(194));
        Slider_FFT_11->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_11
      { Slider_FFT_12 = new Fl_Slider(106, 38, 8, 35);
        Slider_FFT_12->type(2);
        Slider_FFT_12->box(FL_ROUNDED_BOX);
        Slider_FFT_12->color((Fl_Color)34);
        Slider_FFT_12->selection_color(FL_RED);
        Slider_FFT_12->labeltype(FL_NO_LABEL);
        Slider_FFT_12->minimum(0.01);
        Slider_FFT_12->maximum(0);
        Slider_FFT_12->align(Fl_Align(194));
        Slider_FFT_12->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_12
      { Slider_FFT_13 = new Fl_Slider(114, 38, 8, 35);
        Slider_FFT_13->type(2);
        Slider_FFT_13->box(FL_ROUNDED_BOX);
        Slider_FFT_13->color((Fl_Color)34);
        Slider_FFT_13->selection_color(FL_RED);
        Slider_FFT_13->labeltype(FL_NO_LABEL);
        Slider_FFT_13->minimum(0.01);
        Slider_FFT_13->maximum(0);
        Slider_FFT_13->align(Fl_Align(194));
        Slider_FFT_13->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_13
      { Slider_FFT_14 = new Fl_Slider(122, 38, 8, 35);
        Slider_FFT_14->type(2);
        Slider_FFT_14->box(FL_ROUNDED_BOX);
        Slider_FFT_14->color((Fl_Color)34);
        Slider_FFT_14->selection_color(FL_RED);
        Slider_FFT_14->labeltype(FL_NO_LABEL);
        Slider_FFT_14->minimum(0.01);
        Slider_FFT_14->maximum(0);
        Slider_FFT_14->align(Fl_Align(194));
        Slider_FFT_14->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_14
      { Slider_FFT_15 = new Fl_Slider(130, 38, 8, 35);
        Slider_FFT_15->type(2);
        Slider_FFT_15->box(FL_ROUNDED_BOX);
        Slider_FFT_15->color((Fl_Color)34);
        Slider_FFT_15->selection_color(FL_RED);
        Slider_FFT_15->labeltype(FL_NO_LABEL);
        Slider_FFT_15->minimum(0.01);
        Slider_FFT_15->maximum(0);
        Slider_FFT_15->align(Fl_Align(194));
        Slider_FFT_15->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_15
      { Slider_FFT_16 = new Fl_Slider(138, 38, 8, 35);
        Slider_FFT_16->type(2);
        Slider_FFT_16->box(FL_ROUNDED_BOX);
        Slider_FFT_16->color((Fl_Color)34);
        Slider_FFT_16->selection_color(FL_RED);
        Slider_FFT_16->labeltype(FL_NO_LABEL);
        Slider_FFT_16->minimum(0.01);
        Slider_FFT_16->maximum(0);
        Slider_FFT_16->align(Fl_Align(194));
        Slider_FFT_16->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_16
      { Slider_FFT_17 = new Fl_Slider(146, 38, 8, 35);
        Slider_FFT_17->type(2);
        Slider_FFT_17->box(FL_ROUNDED_BOX);
        Slider_FFT_17->color((Fl_Color)34);
        Slider_FFT_17->selection_color(FL_RED);
        Slider_FFT_17->labeltype(FL_NO_LABEL);
        Slider_FFT_17->minimum(0.01);
        Slider_FFT_17->maximum(0);
        Slider_FFT_17->align(Fl_Align(194));
        Slider_FFT_17->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_17
      { Slider_FFT_18 = new Fl_Slider(154, 38, 8, 35);
        Slider_FFT_18->type(2);
        Slider_FFT_18->box(FL_ROUNDED_BOX);
        Slider_FFT_18->color((Fl_Color)34);
        Slider_FFT_18->selection_color(FL_RED);
        Slider_FFT_18->labeltype(FL_NO_LABEL);
        Slider_FFT_18->minimum(0.01);
        Slider_FFT_18->maximum(0);
        Slider_FFT_18->align(Fl_Align(194));
        Slider_FFT_18->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_18
      { Slider_FFT_19 = new Fl_Slider(162, 38, 8, 35);
        Slider_FFT_19->type(2);
        Slider_FFT_19->box(FL_ROUNDED_BOX);
        Slider_FFT_19->color((Fl_Color)34);
        Slider_FFT_19->selection_color(FL_RED);
        Slider_FFT_19->labeltype(FL_NO_LABEL);
        Slider_FFT_19->minimum(0.01);
        Slider_FFT_19->maximum(0);
        Slider_FFT_19->align(Fl_Align(194));
        Slider_FFT_19->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_19
      { Slider_FFT_20 = new Fl_Slider(170, 38, 8, 35);
        Slider_FFT_20->type(2);
        Slider_FFT_20->box(FL_ROUNDED_BOX);
        Slider_FFT_20->color((Fl_Color)34);
        Slider_FFT_20->selection_color(FL_RED);
        Slider_FFT_20->labeltype(FL_NO_LABEL);
        Slider_FFT_20->minimum(0.01);
        Slider_FFT_20->maximum(0);
        Slider_FFT_20->align(Fl_Align(194));
        Slider_FFT_20->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_20
      { Slider_FFT_21 = new Fl_Slider(178, 38, 8, 35);
        Slider_FFT_21->type(2);
        Slider_FFT_21->box(FL_ROUNDED_BOX);
        Slider_FFT_21->color((Fl_Color)34);
        Slider_FFT_21->selection_color(FL_RED);
        Slider_FFT_21->labeltype(FL_NO_LABEL);
        Slider_FFT_21->minimum(0.01);
        Slider_FFT_21->maximum(0);
        Slider_FFT_21->align(Fl_Align(194));
        Slider_FFT_21->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_21
      { Slider_FFT_22 = new Fl_Slider(186, 38, 8, 35);
        Slider_FFT_22->type(2);
        Slider_FFT_22->box(FL_ROUNDED_BOX);
        Slider_FFT_22->color((Fl_Color)34);
        Slider_FFT_22->selection_color(FL_RED);
        Slider_FFT_22->labeltype(FL_NO_LABEL);
        Slider_FFT_22->minimum(0.01);
        Slider_FFT_22->maximum(0);
        Slider_FFT_22->align(Fl_Align(194));
        Slider_FFT_22->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_22
      { Slider_FFT_23 = new Fl_Slider(194, 38, 8, 35);
        Slider_FFT_23->type(2);
        Slider_FFT_23->box(FL_ROUNDED_BOX);
        Slider_FFT_23->color((Fl_Color)34);
        Slider_FFT_23->selection_color(FL_RED);
        Slider_FFT_23->labeltype(FL_NO_LABEL);
        Slider_FFT_23->minimum(0.01);
        Slider_FFT_23->maximum(0);
        Slider_FFT_23->align(Fl_Align(194));
        Slider_FFT_23->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_23
      { Slider_FFT_24 = new Fl_Slider(202, 38, 8, 35);
        Slider_FFT_24->type(2);
        Slider_FFT_24->box(FL_ROUNDED_BOX);
        Slider_FFT_24->color((Fl_Color)34);
        Slider_FFT_24->selection_color(FL_RED);
        Slider_FFT_24->labeltype(FL_NO_LABEL);
        Slider_FFT_24->minimum(0.01);
        Slider_FFT_24->maximum(0);
        Slider_FFT_24->align(Fl_Align(194));
        Slider_FFT_24->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_24
      { Slider_FFT_25 = new Fl_Slider(210, 38, 8, 35);
        Slider_FFT_25->type(2);
        Slider_FFT_25->box(FL_ROUNDED_BOX);
        Slider_FFT_25->color((Fl_Color)34);
        Slider_FFT_25->selection_color(FL_RED);
        Slider_FFT_25->labeltype(FL_NO_LABEL);
        Slider_FFT_25->minimum(0.01);
        Slider_FFT_25->maximum(0);
        Slider_FFT_25->align(Fl_Align(194));
        Slider_FFT_25->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_25
      { Slider_FFT_26 = new Fl_Slider(218, 38, 8, 35);
        Slider_FFT_26->type(2);
        Slider_FFT_26->box(FL_ROUNDED_BOX);
        Slider_FFT_26->color((Fl_Color)34);
        Slider_FFT_26->selection_color(FL_RED);
        Slider_FFT_26->labeltype(FL_NO_LABEL);
        Slider_FFT_26->minimum(0.01);
        Slider_FFT_26->maximum(0);
        Slider_FFT_26->align(Fl_Align(194));
        Slider_FFT_26->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_26
      { Slider_FFT_27 = new Fl_Slider(226, 38, 8, 35);
        Slider_FFT_27->type(2);
        Slider_FFT_27->box(FL_ROUNDED_BOX);
        Slider_FFT_27->color((Fl_Color)34);
        Slider_FFT_27->selection_color(FL_RED);
        Slider_FFT_27->labeltype(FL_NO_LABEL);
        Slider_FFT_27->minimum(0.01);
        Slider_FFT_27->maximum(0);
        Slider_FFT_27->align(Fl_Align(194));
        Slider_FFT_27->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_27
      { Slider_FFT_28 = new Fl_Slider(234, 38, 8, 35);
        Slider_FFT_28->type(2);
        Slider_FFT_28->box(FL_ROUNDED_BOX);
        Slider_FFT_28->color((Fl_Color)34);
        Slider_FFT_28->selection_color(FL_RED);
        Slider_FFT_28->labeltype(FL_NO_LABEL);
        Slider_FFT_28->minimum(0.01);
        Slider_FFT_28->maximum(0);
        Slider_FFT_28->align(Fl_Align(194));
        Slider_FFT_28->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_28
      { Slider_FFT_29 = new Fl_Slider(242, 38, 8, 35);
        Slider_FFT_29->type(2);
        Slider_FFT_29->box(FL_ROUNDED_BOX);
        Slider_FFT_29->color((Fl_Color)34);
        Slider_FFT_29->selection_color(FL_RED);
        Slider_FFT_29->labeltype(FL_NO_LABEL);
        Slider_FFT_29->minimum(0.01);
        Slider_FFT_29->maximum(0);
        Slider_FFT_29->align(Fl_Align(194));
        Slider_FFT_29->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_29
      { Slider_FFT_30 = new Fl_Slider(250, 38, 8, 35);
        Slider_FFT_30->type(2);
        Slider_FFT_30->box(FL_ROUNDED_BOX);
        Slider_FFT_30->color((Fl_Color)34);
        Slider_FFT_30->selection_color(FL_RED);
        Slider_FFT_30->labeltype(FL_NO_LABEL);
        Slider_FFT_30->minimum(0.01);
        Slider_FFT_30->maximum(0);
        Slider_FFT_30->align(Fl_Align(194));
        Slider_FFT_30->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_30
      { Slider_FFT_31 = new Fl_Slider(258, 38, 8, 35);
        Slider_FFT_31->type(2);
        Slider_FFT_31->box(FL_ROUNDED_BOX);
        Slider_FFT_31->color((Fl_Color)34);
        Slider_FFT_31->selection_color(FL_RED);
        Slider_FFT_31->labeltype(FL_NO_LABEL);
        Slider_FFT_31->minimum(0.01);
        Slider_FFT_31->maximum(0);
        Slider_FFT_31->align(Fl_Align(194));
        Slider_FFT_31->when(FL_WHEN_NEVER);
      } // Fl_Slider* Slider_FFT_31
      o->end();
    } // Fl_Group* o
    { Slider_OutputLevel_L = new Fl_Slider(10, 74, 131, 6);
      Slider_OutputLevel_L->type(3);
      Slider_OutputLevel_L->box(FL_ROUNDED_BOX);
      Slider_OutputLevel_L->color((Fl_Color)34);
      Slider_OutputLevel_L->selection_color(FL_RED);
      Slider_OutputLevel_L->labeltype(FL_NO_LABEL);
      Slider_OutputLevel_L->minimum(32768);
      Slider_OutputLevel_L->maximum(0);
      Slider_OutputLevel_L->align(Fl_Align(194));
      Slider_OutputLevel_L->when(FL_WHEN_NEVER);
    } // Fl_Slider* Slider_OutputLevel_L
    { Slider_OutputLevel_R = new Fl_Slider(137, 74, 131, 6);
      Slider_OutputLevel_R->type(3);
      Slider_OutputLevel_R->box(FL_ROUNDED_BOX);
      Slider_OutputLevel_R->color((Fl_Color)34);
      Slider_OutputLevel_R->selection_color(FL_RED);
      Slider_OutputLevel_R->labeltype(FL_NO_LABEL);
      Slider_OutputLevel_R->maximum(32768);
      Slider_OutputLevel_R->align(Fl_Align(194));
      Slider_OutputLevel_R->when(FL_WHEN_NEVER);
    } // Fl_Slider* Slider_OutputLevel_R
    { Fl_Group* o = new Fl_Group(45, 158, 299, 237, "CALC");
      o->labeltype(FL_NO_LABEL);
      { Calc_Bpm = new Fl_Value_Input(165, 373, 55, 22, "BPM Calc");
        Calc_Bpm->tooltip("Enter Your Input BPM");
        Calc_Bpm->box(FL_GTK_DOWN_BOX);
        Calc_Bpm->labelfont(1);
        Calc_Bpm->labelsize(10);
        Calc_Bpm->labelcolor(FL_BACKGROUND2_COLOR);
        Calc_Bpm->minimum(1);
        Calc_Bpm->maximum(500);
        Calc_Bpm->value(60);
        Calc_Bpm->textfont(1);
        Calc_Bpm->callback((Fl_Callback*)CB_Calc_Bpm);
        Calc_Bpm->hide();
      } // Fl_Value_Input* Calc_Bpm
      { Calc_0 = new Fl_Output(45, 158, 299, 22, "1 / 1 ");
        Calc_0->box(FL_GTK_DOWN_BOX);
        Calc_0->color((Fl_Color)30);
        Calc_0->labelsize(10);
        Calc_0->labelcolor((Fl_Color)79);
        Calc_0->textfont(1);
        Calc_0->textsize(11);
        Calc_0->textcolor(FL_BACKGROUND2_COLOR);
        Calc_0->when(FL_WHEN_NEVER);
        Calc_0->hide();
      } // Fl_Output* Calc_0
      { Calc_1 = new Fl_Output(45, 188, 299, 22, "1 / 2 ");
        Calc_1->box(FL_GTK_DOWN_BOX);
        Calc_1->color((Fl_Color)30);
        Calc_1->labelsize(10);
        Calc_1->labelcolor((Fl_Color)79);
        Calc_1->textfont(1);
        Calc_1->textsize(11);
        Calc_1->textcolor(FL_BACKGROUND2_COLOR);
        Calc_1->when(FL_WHEN_NEVER);
        Calc_1->hide();
      } // Fl_Output* Calc_1
      { Calc_2 = new Fl_Output(45, 218, 299, 22, "1 / 4 ");
        Calc_2->box(FL_GTK_DOWN_BOX);
        Calc_2->color((Fl_Color)30);
        Calc_2->labelsize(10);
        Calc_2->labelcolor((Fl_Color)79);
        Calc_2->textfont(1);
        Calc_2->textsize(11);
        Calc_2->textcolor(FL_BACKGROUND2_COLOR);
        Calc_2->when(FL_WHEN_NEVER);
        Calc_2->hide();
      } // Fl_Output* Calc_2
      { Calc_3 = new Fl_Output(45, 248, 299, 22, "1 / 8 ");
        Calc_3->box(FL_GTK_DOWN_BOX);
        Calc_3->color((Fl_Color)30);
        Calc_3->labelsize(10);
        Calc_3->labelcolor((Fl_Color)79);
        Calc_3->textfont(1);
        Calc_3->textsize(11);
        Calc_3->textcolor(FL_BACKGROUND2_COLOR);
        Calc_3->when(FL_WHEN_NEVER);
        Calc_3->hide();
      } // Fl_Output* Calc_3
      { Calc_4 = new Fl_Output(45, 278, 299, 22, "1 / 16 ");
        Calc_4->box(FL_GTK_DOWN_BOX);
        Calc_4->color((Fl_Color)30);
        Calc_4->labelsize(10);
        Calc_4->labelcolor((Fl_Color)79);
        Calc_4->textfont(1);
        Calc_4->textsize(11);
        Calc_4->textcolor(FL_BACKGROUND2_COLOR);
        Calc_4->when(FL_WHEN_NEVER);
        Calc_4->hide();
      } // Fl_Output* Calc_4
      { Calc_5 = new Fl_Output(45, 308, 299, 22, "1 / 32 ");
        Calc_5->box(FL_GTK_DOWN_BOX);
        Calc_5->color((Fl_Color)30);
        Calc_5->labelsize(10);
        Calc_5->labelcolor((Fl_Color)79);
        Calc_5->textfont(1);
        Calc_5->textsize(11);
        Calc_5->textcolor(FL_BACKGROUND2_COLOR);
        Calc_5->when(FL_WHEN_NEVER);
        Calc_5->hide();
      } // Fl_Output* Calc_5
      { Calc_6 = new Fl_Output(45, 338, 299, 22, "1 / 64 ");
        Calc_6->box(FL_GTK_DOWN_BOX);
        Calc_6->color((Fl_Color)30);
        Calc_6->labelsize(10);
        Calc_6->labelcolor((Fl_Color)79);
        Calc_6->textfont(1);
        Calc_6->textsize(11);
        Calc_6->textcolor(FL_BACKGROUND2_COLOR);
        Calc_6->when(FL_WHEN_NEVER);
        Calc_6->hide();
      } // Fl_Output* Calc_6
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(20, 30, 330, 290, "DSP");
      o->labeltype(FL_NO_LABEL);
      { Eq_0 = new Fl_Slider(105, 165, 20, 85, "63hz");
        Eq_0->tooltip("Eq");
        Eq_0->type(4);
        Eq_0->box(FL_GTK_DOWN_BOX);
        Eq_0->color((Fl_Color)36);
        Eq_0->selection_color((Fl_Color)128);
        Eq_0->labelfont(1);
        Eq_0->labelsize(9);
        Eq_0->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_0->minimum(5);
        Eq_0->maximum(-5);
        Eq_0->step(0.05);
        Eq_0->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_0
      { Eq_1 = new Fl_Slider(135, 165, 20, 85, "125hz");
        Eq_1->tooltip("Eq");
        Eq_1->type(4);
        Eq_1->box(FL_GTK_DOWN_BOX);
        Eq_1->color((Fl_Color)36);
        Eq_1->selection_color((Fl_Color)128);
        Eq_1->labelfont(1);
        Eq_1->labelsize(9);
        Eq_1->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_1->minimum(5);
        Eq_1->maximum(-5);
        Eq_1->step(0.05);
        Eq_1->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_1
      { Eq_2 = new Fl_Slider(165, 165, 20, 85, "250hz");
        Eq_2->tooltip("Eq");
        Eq_2->type(4);
        Eq_2->box(FL_GTK_DOWN_BOX);
        Eq_2->color((Fl_Color)36);
        Eq_2->selection_color((Fl_Color)128);
        Eq_2->labelfont(1);
        Eq_2->labelsize(9);
        Eq_2->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_2->minimum(5);
        Eq_2->maximum(-5);
        Eq_2->step(0.05);
        Eq_2->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_2
      { Eq_3 = new Fl_Slider(195, 165, 20, 85, "500hz");
        Eq_3->tooltip("Eq");
        Eq_3->type(4);
        Eq_3->box(FL_GTK_DOWN_BOX);
        Eq_3->color((Fl_Color)36);
        Eq_3->selection_color((Fl_Color)128);
        Eq_3->labelfont(1);
        Eq_3->labelsize(9);
        Eq_3->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_3->minimum(5);
        Eq_3->maximum(-5);
        Eq_3->step(0.05);
        Eq_3->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_3
      { Eq_4 = new Fl_Slider(225, 165, 20, 85, "1khz");
        Eq_4->tooltip("Eq");
        Eq_4->type(4);
        Eq_4->box(FL_GTK_DOWN_BOX);
        Eq_4->color((Fl_Color)36);
        Eq_4->selection_color((Fl_Color)128);
        Eq_4->labelfont(1);
        Eq_4->labelsize(9);
        Eq_4->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_4->minimum(5);
        Eq_4->maximum(-5);
        Eq_4->step(0.05);
        Eq_4->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_4
      { Eq_5 = new Fl_Slider(255, 165, 20, 85, "2khz");
        Eq_5->tooltip("Eq");
        Eq_5->type(4);
        Eq_5->box(FL_GTK_DOWN_BOX);
        Eq_5->color((Fl_Color)36);
        Eq_5->selection_color((Fl_Color)128);
        Eq_5->labelfont(1);
        Eq_5->labelsize(9);
        Eq_5->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_5->minimum(5);
        Eq_5->maximum(-5);
        Eq_5->step(0.05);
        Eq_5->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_5
      { Eq_6 = new Fl_Slider(285, 165, 20, 85, "4khz");
        Eq_6->tooltip("Eq");
        Eq_6->type(4);
        Eq_6->box(FL_GTK_DOWN_BOX);
        Eq_6->color((Fl_Color)36);
        Eq_6->selection_color((Fl_Color)128);
        Eq_6->labelfont(1);
        Eq_6->labelsize(9);
        Eq_6->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_6->minimum(5);
        Eq_6->maximum(-5);
        Eq_6->step(0.05);
        Eq_6->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_6
      { Eq_7 = new Fl_Slider(315, 165, 20, 85, "8khz");
        Eq_7->tooltip("Eq");
        Eq_7->type(4);
        Eq_7->box(FL_GTK_DOWN_BOX);
        Eq_7->color((Fl_Color)36);
        Eq_7->selection_color((Fl_Color)128);
        Eq_7->labelfont(1);
        Eq_7->labelsize(9);
        Eq_7->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_7->minimum(5);
        Eq_7->maximum(-5);
        Eq_7->step(0.05);
        Eq_7->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_7
      { Eq_8 = new Fl_Slider(25, 230, 70, 20, "High Pass");
        Eq_8->tooltip("High Pass/Low Cut Filter:");
        Eq_8->type(5);
        Eq_8->box(FL_GTK_DOWN_BOX);
        Eq_8->color((Fl_Color)36);
        Eq_8->selection_color((Fl_Color)128);
        Eq_8->labelfont(1);
        Eq_8->labelsize(9);
        Eq_8->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_8->minimum(10);
        Eq_8->maximum(200);
        Eq_8->step(0.05);
        Eq_8->value(20);
        Eq_8->callback((Fl_Callback*)CB_Eq);
      } // Fl_Slider* Eq_8
      { Eq_On = new Fl_Light_Button(25, 165, 65, 30, "Eq");
        Eq_On->tooltip("Enable/Disable EQ");
        Eq_On->box(FL_GTK_THIN_UP_BOX);
        Eq_On->color((Fl_Color)30);
        Eq_On->selection_color((Fl_Color)87);
        Eq_On->labelfont(1);
        Eq_On->labelsize(12);
        Eq_On->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_On->callback((Fl_Callback*)CB_Eq_On);
      } // Fl_Light_Button* Eq_On
      { Eq_Reset = new Fl_Button(25, 200, 40, 15, "Reset");
        Eq_Reset->box(FL_GTK_THIN_UP_BOX);
        Eq_Reset->color((Fl_Color)36);
        Eq_Reset->selection_color(FL_BACKGROUND2_COLOR);
        Eq_Reset->labelfont(1);
        Eq_Reset->labelsize(10);
        Eq_Reset->labelcolor(FL_BACKGROUND2_COLOR);
        Eq_Reset->callback((Fl_Callback*)CB_Eq_Reset);
        Eq_Reset->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Button* Eq_Reset
      { Vst_On = new Fl_Light_Button(25, 275, 45, 20, "Vst");
        Vst_On->tooltip("Vst");
        Vst_On->box(FL_GTK_THIN_UP_BOX);
        Vst_On->color((Fl_Color)30);
        Vst_On->selection_color((Fl_Color)87);
        Vst_On->labelfont(1);
        Vst_On->labelsize(12);
        Vst_On->labelcolor(FL_BACKGROUND2_COLOR);
        Vst_On->callback((Fl_Callback*)CB_Vst_On);
      } // Fl_Light_Button* Vst_On
      { Vst_Choice = new Fl_Choice(115, 275, 220, 20, "vst_choice");
        Vst_Choice->box(FL_GTK_DOWN_BOX);
        Vst_Choice->down_box(FL_GTK_DOWN_BOX);
        Vst_Choice->color((Fl_Color)34);
        Vst_Choice->selection_color((Fl_Color)87);
        Vst_Choice->labeltype(FL_NO_LABEL);
        Vst_Choice->labelsize(10);
        Vst_Choice->labelcolor(FL_BACKGROUND2_COLOR);
        Vst_Choice->textfont(1);
        Vst_Choice->textsize(10);
        Vst_Choice->textcolor(FL_BACKGROUND2_COLOR);
        Vst_Choice->callback((Fl_Callback*)CB_Vst_Choice);
        Vst_Choice->align(Fl_Align(36|FL_ALIGN_INSIDE));
        Vst_Choice->when(FL_WHEN_CHANGED);
      } // Fl_Choice* Vst_Choice
      { Vst_Reset = new Fl_Button(25, 300, 40, 15, "Reset");
        Vst_Reset->box(FL_GTK_THIN_UP_BOX);
        Vst_Reset->color((Fl_Color)36);
        Vst_Reset->selection_color(FL_BACKGROUND2_COLOR);
        Vst_Reset->labelfont(1);
        Vst_Reset->labelsize(10);
        Vst_Reset->labelcolor(FL_BACKGROUND2_COLOR);
        Vst_Reset->callback((Fl_Callback*)CB_Vst_Reset);
        Vst_Reset->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Button* Vst_Reset
      { Vst_Show = new Fl_Button(74, 275, 35, 20, "Show");
        Vst_Show->box(FL_GTK_THIN_UP_BOX);
        Vst_Show->color((Fl_Color)36);
        Vst_Show->selection_color(FL_BACKGROUND2_COLOR);
        Vst_Show->labelfont(1);
        Vst_Show->labelsize(10);
        Vst_Show->labelcolor(FL_BACKGROUND2_COLOR);
        Vst_Show->callback((Fl_Callback*)CB_Vst_Show);
        Vst_Show->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Button* Vst_Show
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(10, 155, 340, 245, "PlayList");
      o->labeltype(FL_NO_LABEL);
      { Playlist_Browser = new Fl_Browser(10, 155, 340, 215);
        Playlist_Browser->type(2);
        Playlist_Browser->box(FL_GTK_DOWN_BOX);
        Playlist_Browser->color((Fl_Color)34);
        Playlist_Browser->selection_color((Fl_Color)87);
        Playlist_Browser->labeltype(FL_NO_LABEL);
        Playlist_Browser->labelsize(9);
        Playlist_Browser->textfont(1);
        Playlist_Browser->textsize(9);
        Playlist_Browser->textcolor(FL_BACKGROUND2_COLOR);
        Playlist_Browser->callback((Fl_Callback*)CB_PlayList);
        Playlist_Browser->when(FL_WHEN_RELEASE);
        Playlist_Browser->hide();
      } // Fl_Browser* Playlist_Browser
      { Playlist_Entries_Total = new Fl_Value_Output(250, 377, 35, 18, "Entries");
        Playlist_Entries_Total->box(FL_GTK_DOWN_BOX);
        Playlist_Entries_Total->color((Fl_Color)34);
        Playlist_Entries_Total->labelsize(10);
        Playlist_Entries_Total->labelcolor(FL_DARK3);
        Playlist_Entries_Total->textsize(11);
        Playlist_Entries_Total->textcolor((Fl_Color)79);
        Playlist_Entries_Total->when(FL_WHEN_NEVER);
        Playlist_Entries_Total->hide();
      } // Fl_Value_Output* Playlist_Entries_Total
      { Button_PlaylistManager = new Fl_Button(295, 375, 55, 20, "Add");
        Button_PlaylistManager->box(FL_GTK_UP_BOX);
        Button_PlaylistManager->color((Fl_Color)36);
        Button_PlaylistManager->labelfont(1);
        Button_PlaylistManager->labelsize(11);
        Button_PlaylistManager->labelcolor(FL_BACKGROUND2_COLOR);
        Button_PlaylistManager->callback((Fl_Callback*)CB_Button_PlaylistManager);
        Button_PlaylistManager->hide();
      } // Fl_Button* Button_PlaylistManager
      { Playlist_Search = new Fl_Input(45, 376, 135, 19, "Search");
        Playlist_Search->box(FL_GTK_DOWN_BOX);
        Playlist_Search->color((Fl_Color)34);
        Playlist_Search->selection_color(FL_FOREGROUND_COLOR);
        Playlist_Search->labelfont(1);
        Playlist_Search->labelsize(9);
        Playlist_Search->labelcolor(FL_DARK3);
        Playlist_Search->textfont(1);
        Playlist_Search->textsize(11);
        Playlist_Search->textcolor((Fl_Color)79);
        Playlist_Search->callback((Fl_Callback*)CB_Playlist_Search);
        Playlist_Search->when(FL_WHEN_CHANGED);
        Playlist_Search->hide();
      } // Fl_Input* Playlist_Search
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(10, 150, 340, 246, "Options");
      o->labeltype(FL_NO_LABEL);
      { Options_Browser_Menu = new Fl_Browser(10, 155, 85, 235);
        Options_Browser_Menu->type(2);
        Options_Browser_Menu->box(FL_GTK_THIN_DOWN_BOX);
        Options_Browser_Menu->color((Fl_Color)34);
        Options_Browser_Menu->selection_color((Fl_Color)87);
        Options_Browser_Menu->labelsize(9);
        Options_Browser_Menu->textfont(1);
        Options_Browser_Menu->textsize(10);
        Options_Browser_Menu->textcolor(FL_BACKGROUND2_COLOR);
        Options_Browser_Menu->callback((Fl_Callback*)CB_Options_Browser_Menu);
        Options_Browser_Menu->when(FL_WHEN_CHANGED);
        Options_Browser_Menu->hide();
      } // Fl_Browser* Options_Browser_Menu
      { Options_Seperator = new Fl_Box(100, 154, 5, 238, "Seperator");
        Options_Seperator->box(FL_GTK_DOWN_BOX);
        Options_Seperator->color((Fl_Color)51);
        Options_Seperator->labeltype(FL_NO_LABEL);
        Options_Seperator->align(Fl_Align(512));
        Options_Seperator->when(FL_WHEN_NEVER);
        Options_Seperator->hide();
      } // Fl_Box* Options_Seperator
      { Options_Slider_Updaterate = new Fl_Value_Slider(215, 165, 100, 15, "Core Updates /sec :");
        Options_Slider_Updaterate->type(5);
        Options_Slider_Updaterate->box(FL_GTK_DOWN_BOX);
        Options_Slider_Updaterate->color((Fl_Color)36);
        Options_Slider_Updaterate->selection_color(FL_RED);
        Options_Slider_Updaterate->labelsize(10);
        Options_Slider_Updaterate->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Slider_Updaterate->minimum(16);
        Options_Slider_Updaterate->maximum(60);
        Options_Slider_Updaterate->step(1);
        Options_Slider_Updaterate->value(49);
        Options_Slider_Updaterate->textfont(3);
        Options_Slider_Updaterate->textcolor((Fl_Color)87);
        Options_Slider_Updaterate->callback((Fl_Callback*)CB_Options_Slider_Updaterate);
        Options_Slider_Updaterate->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* Options_Slider_Updaterate
      { Options_Slider_SpectrumFalloffSpeed = new Fl_Value_Slider(215, 195, 100, 15, "Falloff Speed :");
        Options_Slider_SpectrumFalloffSpeed->type(5);
        Options_Slider_SpectrumFalloffSpeed->box(FL_GTK_DOWN_BOX);
        Options_Slider_SpectrumFalloffSpeed->color((Fl_Color)36);
        Options_Slider_SpectrumFalloffSpeed->selection_color(FL_RED);
        Options_Slider_SpectrumFalloffSpeed->labelsize(10);
        Options_Slider_SpectrumFalloffSpeed->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Slider_SpectrumFalloffSpeed->minimum(0.02);
        Options_Slider_SpectrumFalloffSpeed->maximum(0.1);
        Options_Slider_SpectrumFalloffSpeed->step(0.005);
        Options_Slider_SpectrumFalloffSpeed->value(0.06);
        Options_Slider_SpectrumFalloffSpeed->textfont(3);
        Options_Slider_SpectrumFalloffSpeed->textcolor((Fl_Color)87);
        Options_Slider_SpectrumFalloffSpeed->callback((Fl_Callback*)CB_Options_Slider_SpectrumFalloffSpeed);
        Options_Slider_SpectrumFalloffSpeed->align(Fl_Align(FL_ALIGN_LEFT));
        Options_Slider_SpectrumFalloffSpeed->hide();
      } // Fl_Value_Slider* Options_Slider_SpectrumFalloffSpeed
      { Options_Slider_SpectrumColourR = new Fl_Value_Slider(215, 225, 100, 15, "Colour R :");
        Options_Slider_SpectrumColourR->type(5);
        Options_Slider_SpectrumColourR->box(FL_GTK_DOWN_BOX);
        Options_Slider_SpectrumColourR->color((Fl_Color)36);
        Options_Slider_SpectrumColourR->selection_color(FL_RED);
        Options_Slider_SpectrumColourR->labelsize(10);
        Options_Slider_SpectrumColourR->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Slider_SpectrumColourR->maximum(255);
        Options_Slider_SpectrumColourR->step(1);
        Options_Slider_SpectrumColourR->value(255);
        Options_Slider_SpectrumColourR->textfont(3);
        Options_Slider_SpectrumColourR->textcolor((Fl_Color)87);
        Options_Slider_SpectrumColourR->callback((Fl_Callback*)CB_Options_Slider_SpectrumColour);
        Options_Slider_SpectrumColourR->align(Fl_Align(FL_ALIGN_LEFT));
        Options_Slider_SpectrumColourR->hide();
      } // Fl_Value_Slider* Options_Slider_SpectrumColourR
      { Options_Slider_SpectrumColourG = new Fl_Value_Slider(215, 245, 100, 15, "Colour G :");
        Options_Slider_SpectrumColourG->type(5);
        Options_Slider_SpectrumColourG->box(FL_GTK_DOWN_BOX);
        Options_Slider_SpectrumColourG->color((Fl_Color)36);
        Options_Slider_SpectrumColourG->selection_color((Fl_Color)61);
        Options_Slider_SpectrumColourG->labelsize(10);
        Options_Slider_SpectrumColourG->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Slider_SpectrumColourG->maximum(255);
        Options_Slider_SpectrumColourG->step(1);
        Options_Slider_SpectrumColourG->value(255);
        Options_Slider_SpectrumColourG->textfont(3);
        Options_Slider_SpectrumColourG->textcolor((Fl_Color)87);
        Options_Slider_SpectrumColourG->callback((Fl_Callback*)CB_Options_Slider_SpectrumColour);
        Options_Slider_SpectrumColourG->align(Fl_Align(FL_ALIGN_LEFT));
        Options_Slider_SpectrumColourG->hide();
      } // Fl_Value_Slider* Options_Slider_SpectrumColourG
      { Options_Slider_SpectrumColourB = new Fl_Value_Slider(215, 265, 100, 15, "Colour B :");
        Options_Slider_SpectrumColourB->type(5);
        Options_Slider_SpectrumColourB->box(FL_GTK_DOWN_BOX);
        Options_Slider_SpectrumColourB->color((Fl_Color)36);
        Options_Slider_SpectrumColourB->selection_color(FL_BLUE);
        Options_Slider_SpectrumColourB->labelsize(10);
        Options_Slider_SpectrumColourB->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Slider_SpectrumColourB->maximum(255);
        Options_Slider_SpectrumColourB->step(1);
        Options_Slider_SpectrumColourB->value(255);
        Options_Slider_SpectrumColourB->textfont(3);
        Options_Slider_SpectrumColourB->textcolor((Fl_Color)87);
        Options_Slider_SpectrumColourB->callback((Fl_Callback*)CB_Options_Slider_SpectrumColour);
        Options_Slider_SpectrumColourB->align(Fl_Align(FL_ALIGN_LEFT));
        Options_Slider_SpectrumColourB->hide();
      } // Fl_Value_Slider* Options_Slider_SpectrumColourB
      { Options_Button_SpectrumEnable = new Fl_Light_Button(215, 165, 35, 15, "Toggle On / Off :");
        Options_Button_SpectrumEnable->tooltip("Toggles all FFT processing");
        Options_Button_SpectrumEnable->box(FL_GTK_THIN_UP_BOX);
        Options_Button_SpectrumEnable->color((Fl_Color)35);
        Options_Button_SpectrumEnable->selection_color((Fl_Color)87);
        Options_Button_SpectrumEnable->labelfont(1);
        Options_Button_SpectrumEnable->labelsize(10);
        Options_Button_SpectrumEnable->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Button_SpectrumEnable->callback((Fl_Callback*)CB_Options_Button_SpectrumEnable);
        Options_Button_SpectrumEnable->align(Fl_Align(FL_ALIGN_LEFT));
        Options_Button_SpectrumEnable->when(FL_WHEN_CHANGED);
        Options_Button_SpectrumEnable->hide();
      } // Fl_Light_Button* Options_Button_SpectrumEnable
      { Options_Choice_OutputDevice = new Fl_Choice(215, 165, 100, 15, "Output Device :");
        Options_Choice_OutputDevice->box(FL_GTK_DOWN_BOX);
        Options_Choice_OutputDevice->down_box(FL_GTK_DOWN_BOX);
        Options_Choice_OutputDevice->color((Fl_Color)34);
        Options_Choice_OutputDevice->selection_color((Fl_Color)87);
        Options_Choice_OutputDevice->labelsize(10);
        Options_Choice_OutputDevice->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Choice_OutputDevice->textfont(1);
        Options_Choice_OutputDevice->textsize(10);
        Options_Choice_OutputDevice->textcolor(FL_BACKGROUND2_COLOR);
        Options_Choice_OutputDevice->callback((Fl_Callback*)CB_Options_HardwareChange);
        Options_Choice_OutputDevice->when(FL_WHEN_CHANGED);
      } // Fl_Choice* Options_Choice_OutputDevice
      { Options_Choice_OutputFreq = new Fl_Choice(215, 185, 100, 15, "Output Frequency :");
        Options_Choice_OutputFreq->box(FL_GTK_DOWN_BOX);
        Options_Choice_OutputFreq->down_box(FL_GTK_DOWN_BOX);
        Options_Choice_OutputFreq->color((Fl_Color)34);
        Options_Choice_OutputFreq->selection_color((Fl_Color)87);
        Options_Choice_OutputFreq->labelsize(10);
        Options_Choice_OutputFreq->labelcolor(FL_BACKGROUND2_COLOR);
        Options_Choice_OutputFreq->textfont(1);
        Options_Choice_OutputFreq->textsize(10);
        Options_Choice_OutputFreq->textcolor(FL_BACKGROUND2_COLOR);
        Options_Choice_OutputFreq->callback((Fl_Callback*)CB_Options_HardwareChange);
        Options_Choice_OutputFreq->when(FL_WHEN_CHANGED);
      } // Fl_Choice* Options_Choice_OutputFreq
      { Options_Debug = new Fl_Browser(110, 155, 230, 235);
        Options_Debug->type(2);
        Options_Debug->color((Fl_Color)33);
        Options_Debug->selection_color((Fl_Color)87);
        Options_Debug->labelsize(9);
        Options_Debug->textfont(1);
        Options_Debug->textsize(10);
        Options_Debug->textcolor((Fl_Color)87);
        Options_Debug->when(FL_WHEN_NEVER);
        Options_Debug->hide();
      } // Fl_Browser* Options_Debug
      o->end();
    } // Fl_Group* o
    MainWindow->end();
  } // Fl_Double_Window* MainWindow
  return MainWindow;
}

Fl_Double_Window *Window2=(Fl_Double_Window *)0;

Fl_File_Browser *Filebrowser=(Fl_File_Browser *)0;

Fl_Output *Filebrowser_Label=(Fl_Output *)0;

Fl_Button *Filebrowser_Drive=(Fl_Button *)0;

Fl_Browser *Playlist_Directories=(Fl_Browser *)0;

Fl_Button *Button_Playlist_Directory_Add=(Fl_Button *)0;

Fl_Button *Button_Playlist_Directory_Remove=(Fl_Button *)0;

Fl_Double_Window* Create_Window2() {
  { Window2 = new Fl_Double_Window(352, 359, "Playlist Manager");
    Window2->color(FL_GRAY0);
    Window2->labelcolor(FL_BACKGROUND2_COLOR);
    Window2->when(FL_WHEN_NEVER);
    { Filebrowser = new Fl_File_Browser(10, 15, 340, 170, "Browse Folder");
      Filebrowser->type(2);
      Filebrowser->box(FL_GTK_THIN_DOWN_BOX);
      Filebrowser->color((Fl_Color)30);
      Filebrowser->selection_color((Fl_Color)87);
      Filebrowser->labelsize(9);
      Filebrowser->labelcolor(FL_RED);
      Filebrowser->textsize(11);
      Filebrowser->textcolor(FL_BACKGROUND2_COLOR);
      Filebrowser->callback((Fl_Callback*)CB_Filebrowser);
      Filebrowser->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      Filebrowser->when(FL_WHEN_RELEASE);
      Filebrowser->filetype(1);
      Filebrowser->type(FL_SELECT_BROWSER);
      Filebrowser->load(cFile.FilePath);
      cFile.changeDir(cFile.FilePath);
    } // Fl_File_Browser* Filebrowser
    { Filebrowser_Label = new Fl_Output(10, 305, 270, 15, "output:");
      Filebrowser_Label->box(FL_GTK_THIN_DOWN_BOX);
      Filebrowser_Label->color((Fl_Color)34);
      Filebrowser_Label->selection_color(FL_FOREGROUND_COLOR);
      Filebrowser_Label->labeltype(FL_NO_LABEL);
      Filebrowser_Label->labelsize(9);
      Filebrowser_Label->labelcolor(FL_BACKGROUND2_COLOR);
      Filebrowser_Label->textfont(1);
      Filebrowser_Label->textsize(9);
      Filebrowser_Label->textcolor((Fl_Color)87);
      Filebrowser_Label->align(Fl_Align(FL_ALIGN_CENTER));
      Filebrowser_Label->when(FL_WHEN_NEVER);
    } // Fl_Output* Filebrowser_Label
    { Filebrowser_Drive = new Fl_Button(280, 305, 70, 15, "[drive]");
      Filebrowser_Drive->box(FL_GTK_UP_BOX);
      Filebrowser_Drive->color((Fl_Color)34);
      Filebrowser_Drive->labelsize(10);
      Filebrowser_Drive->labelcolor((Fl_Color)79);
      Filebrowser_Drive->callback((Fl_Callback*)CB_Filebrowser_Drive);
    } // Fl_Button* Filebrowser_Drive
    { Playlist_Directories = new Fl_Browser(10, 200, 340, 95, "Directories Added to Playlist Scan");
      Playlist_Directories->type(2);
      Playlist_Directories->box(FL_GTK_THIN_DOWN_BOX);
      Playlist_Directories->color((Fl_Color)34);
      Playlist_Directories->selection_color((Fl_Color)87);
      Playlist_Directories->labelsize(9);
      Playlist_Directories->labelcolor(FL_RED);
      Playlist_Directories->textsize(11);
      Playlist_Directories->textcolor(FL_BACKGROUND2_COLOR);
      Playlist_Directories->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      Playlist_Directories->when(FL_WHEN_NEVER);
    } // Fl_Browser* Playlist_Directories
    { Button_Playlist_Directory_Add = new Fl_Button(10, 330, 50, 25, "Add");
      Button_Playlist_Directory_Add->box(FL_GTK_THIN_UP_BOX);
      Button_Playlist_Directory_Add->color((Fl_Color)36);
      Button_Playlist_Directory_Add->labelfont(1);
      Button_Playlist_Directory_Add->labelsize(12);
      Button_Playlist_Directory_Add->labelcolor(FL_BACKGROUND2_COLOR);
      Button_Playlist_Directory_Add->callback((Fl_Callback*)CB_Button_Playlist_Directory_Add);
    } // Fl_Button* Button_Playlist_Directory_Add
    { Button_Playlist_Directory_Remove = new Fl_Button(65, 340, 55, 15, "Remove");
      Button_Playlist_Directory_Remove->box(FL_GTK_THIN_UP_BOX);
      Button_Playlist_Directory_Remove->color((Fl_Color)36);
      Button_Playlist_Directory_Remove->labelfont(1);
      Button_Playlist_Directory_Remove->labelsize(10);
      Button_Playlist_Directory_Remove->labelcolor(FL_BACKGROUND2_COLOR);
      Button_Playlist_Directory_Remove->callback((Fl_Callback*)CB_Button_Playlist_Directory_Remove);
    } // Fl_Button* Button_Playlist_Directory_Remove
    Window2->end();
  } // Fl_Double_Window* Window2
  return Window2;
}

Fl_Double_Window *Window3=(Fl_Double_Window *)0;

Fl_Double_Window* Create_Window3() {
  { Window3 = new Fl_Double_Window(725, 554, "VST");
    Window3->color(FL_GRAY0);
    Window3->labelcolor(FL_BACKGROUND2_COLOR);
    Window3->when(FL_WHEN_NEVER);
    Window3->end();
    Window3->resizable(Window3);
  } // Fl_Double_Window* Window3
  return Window3;
}
